{
    "prof_info": [
        {
            "prof_name": "Henning Schulzrinne",
            "prof_id": 350,
            "total_reviews": 8
        }
    ],
    "reviews": [
        {
            "course_name": "Topics in Computer Science: VoIP Security",
            "review_date": "January 19, 2009",
            "review_content": "\nI agree with the previous reviewer. Stay way clear of this class unless they change the layout of it severly.\nThe lectures were just student presentations of different more or less interesting subjects. It was supposed to be seminar style but since no one had a good VoIP background the presentations (including mine) were naturally shallow and buzz word centric.\nThe labs (30%) were enormously time-consuming and not very rewarding. My group had hands on experience with setting up VoIP servers before, otherwise I would had been completely screwed. The presentations were alright but harshly graded. The projects were rather vague and too wide in scope and in my opinion most of the groups did not produce anything of substantial value.\nEven though this was the class that caused me the most stress and took almost as much time as OS I still got a rather lousy grade compare to other classes. This class gave me almost nothing. I still don't know how VoIP works :-)\nWorkload:\nThe labs took way to much time without giving much back. There were no proper instructions and even though the TA was very helpful it still did not work very well.\nI would have thought that we would just play around with VoIP equipment but it was more an exercice in testing 12 different features on say 4 different phones and over UDP and TCP rendering 12x4x4x2 cases to implement and test.\n"
        },
        {
            "course_name": "Topics in Computer Science: VoIP Security",
            "review_date": "December 25, 2008",
            "review_content": "\nSteer clear of this course. It is supposed to be a research course, but except for the project (40%), everything else is a lot of manual (I'd prefer the word 'menial') labor that comes to nothing. Schulzrinne is probably a brilliant professor, but this course is the worst I have ever taken in my whole life, and this course is also the worst mistake I made in Columbia.\nAs it seemed to me, there is nothing worthwhile taught in the class, the TA was not very useful if you went up to him with problems, the labs (3, 30%) were long and monotonous that didn't teach you anything about how VoIP really worked, 2 presentations (30%) that is supposed to make you research the topics and give a talk on (but everybody just makes short work of it). \nThe project can be really meaningful if you choose a good topic, but make sure you either do it alone or get a partner who is sincere about the work and is not looking for a free ride. The TA was not very helpful in resolving either technical or interpersonal problems. You might get a mentor in one of the professor's PhD students, but remember that you might not get a lot of help unless you put it yourself. Everyone I went to talked in arcane terms that they expected you to know, but you wouldn't know anything about them unless you have prior background in that field. \nAnd compared to the fact that it has a 40% weightage, the professor does expect a little more than that. If you do take this course, brace yourself for some boring moments in the semester, and do not take up a project that would require you to write a lot of code from scratch. No one seemed to care that writing original, running source code for a nascent idea wasn't trivial (that was what my project was about, and unfortunately I had a partner who thought his job was only to supervise).\nI wouldn't recommend this to anyone, but to each his own.\n\nWorkload:\nAverage to a little high, but only in quantity and not quality.\n"
        },
        {
            "course_name": "Operating Systems I",
            "review_date": "April 29, 2007",
            "review_content": "\nPure hell. Though Shulzrinne is a very competent lecturer, who fills the powerpoint-driven class with his vast array of knowledge and with up-to-date news (he even brought up newegg.com on the screen to be sure of the size vs. price of hard disks today) the course itself is probably the most intense you will EVER see in this department. \nBe prepared for a very new kind of programming; you won't be writing anything from scratch (save perhaps the first project where you write the unix Shell). Instead you will have to understand lots of cryptic code and obscure structs in the kernel in order to piece together half of an understanding of what is going on before you can actually make changes. The development cycle, far from being the simple 'javac blah.java; java blah' will instead be tweaking small sections, recompiling the kernel, and rebooting, which can take the bulk of your time. The three TAs, however, were very available and ready to help out.\nWorkload:\nExtreme. Five group programming assignments which involve VERY confusing hours of attempting to make sense of vast reams of code in the kernel and then finally inserting a few strategic lines in just the right place to make it work. You will spend many hours figuring out how to track down bugs causing mysterious kernel panics that crash the machine. In addition, there are six written (individual) homeworks that are also quite heavy. Altogether there are 11 assignments, launched close together, and no time to breathe. Homework 50%. One midterm (20%) and one final (30%).\n"
        },
        {
            "course_name": "Advanced Internet Services",
            "review_date": "June 27, 2004",
            "review_content": "\nThe AIS course is one of the most intensive courses. People grumble to high heaven about this class. Fact is, this course has 2 major parts. One is the theory about multimedia on the Internet. This stuff is all bleeding edge - so be prepared to google, read RFCs and chase down details. The second part is the programming part. You **have** to be very good in programming - particularly in threads, locking, networking ... all that low level stuff. You **will not** learn that here, rather the projects will expose you to them. The projects all build up to a software radio, which is a really cool thing to build. (Interviewers are really impressed to hear about this.) And you will become a battle hardened programmer at the end of it all. If you have not done this kind of programming before, then be prepared to spend 10-20 hours a week in the lab. It will be worth it.\nProf Schulzrinne is really into his stuff. He knows it inside out. Okay his lectures are not that detailed. But he is amazingly responsive via email (I got a reply back within half an hour - at 1am!). If you go to him prepared, then you'll find a knowledgeable and responsive person; if you go unprepared or ask stupid questions he will make you feel exactly that ... unprepared and stupid. Don't complain. Learn to deal with him on equal terms and you'll learn a heck of a lot in the class.\nWorkload:\n8-10 homeworks consisting of theory and programming projects - they come at a pretty fast clip so be prepared. The theory is not too bad. Allocate 10-20 hours a week, depending on your programming skill level, for this course and you'll be fine. Midterm and final have moderately difficult problems. If you've got the main concepts you'll be fine.\n"
        },
        {
            "course_name": "Advanced Internet Services",
            "review_date": "December 23, 2003",
            "review_content": "\nno text book , many google things,need to read lots of RFC and papers. most topic base on sildes, anyway, it is  a difficult course.\nWorkload:\n10 medium-sized programming projects (some are very hard), plus written questions, Midterm, Final.\n"
        },
        {
            "course_name": "Advanced Programming",
            "review_date": "May 02, 2002",
            "review_content": "\nDespite the grumbling from other people in the class, I found this class very valuable. As a graduating senior heading out into the computer science workforce, I found the presentation of a broad range of topics very helpful. Though Prof. Shulzrinne didn't have time to go into great depth about any one topic (except maybe C programming), I felt that the overviews given (along with references to website where we could get more info) gave me a much better understanding of the tools & languages that are out there and what can be done with them. Other people in the class hated how we had to go searching for documentation around the web to find how to do certain things, but I thought it was actually very good preparation for the \"real world\" of software development jobs, where research of this kind is an essential part of the job. The class was taught exclusively with PowerPoint slides, which at times were the same as reading \"man\" pages, but Prof. Schulzrinne did provide a lot more related information in class (i.e. go to class). I don't know if the class really should be a replacement for softe, because (having taken that prior to this course), I found they were both useful, and that students will probably get more out of AP if it is taken after softe. Finally, and maybe most importantly, I need to commend Prof. Schulzrinne on his accessiblity (via e-mail). He answered all of the [many] questions that came to the e-mail mailing list, and always seemed to reply to e-mails very quickly. How many other professors do you know who would write back to you within an hour when you send an e-mail to him at 12:05 AM on a Saturday morning??\nWorkload:\n9 Homework, with approximately 2 weeks to do each (each one overlaps the previous by one week) Midterm and final.\n"
        },
        {
            "course_name": "Advanced Programming",
            "review_date": "April 12, 2002",
            "review_content": "\nThis class is supposed to replace Softe, and from the initial looks of the syllabus, it seems very worthy. This is the first time it was given, so expect some changes, but it covers a bunch of real tools in the marketplace, such as BASH, C, XML, SOAP, RPM, TKL, among many others. Its also apparently looked at as a precursor to Operating Systems for students who like to focus on coding instead of the theories behind it. What happens as the semester goes on, however, is that the usefullness of the subjects as they're taught varies inversely with their actual importance in the \"real world\". The class ends up wandering aimlessly as Schulzrinne simply presents bits and pieces of each subject through his powerpoint presentations. Then when homeworks come around, they're often on subjects hardly covered in class, and you're expected to google your way to tutorials provided elsewhere. This is especially the case with XML/Java (an very active & useful topic), where a few scant lecture slides leave you with nothing useful for the homework, and you end up learning it as though you're not even in a class that's supposed to teach it! Oreilly books to the rescue! When Schulzrinne ventures into talking about the marketplace of OpenSource vs PeopleSoft vs Proprietary and the like its like reading a weeks worth of slashdot. It occured to me that the people that are the most interesting to listen to on those subjects are out in the industry actually shaping their fates, not in the classroom. The bottom line is that, common to other Schulzrinne reviews on CULPA, he expects you to learn it based largely on unspecified non-class materials. And common to most all CS classes I've taken, the HWs serve as a good lesson in doing the HW, not necessarily in learning the subject (to be fair, the C assignments were a bit better as we spent about 5 weeks with it). I finish each one thinking about how next time I have to use whatever tool I'm going to have to learn the syntax mostly from the beginning anyway. The syllabus will probably improve after it gets reviewed a couple times, but the core experience is not much more educational than getting a linux machine and playing with these technologies on your own time. The only difference is that here you'll get a grade and 3 credits for it. I don't know if its better than softe, but from conversations I've had with friends it sure sounds like there's significantly less work and stress.\nWorkload:\nThe 10 homeworks vary from 2 hours to 20 hours. Unfocused just like the class; some theory, some coding, a lot of google-searching. Be sure to buy the Ritchie C Programming Language book even though its not listed. Exams are fairly tough. One question on the midterm was to write out a syntactically correct malloc() function in C by hand in ~20 minutes. Yikes!\n"
        },
        {
            "course_name": "Network Security",
            "review_date": "December 31, 1999",
            "review_content": "\nAnother reminder that this is a research university, not a teaching center. Schulzrinne means well, and he is into his work, but lectures are no more than powerpoint versions (no joke) of the mediocre book, and the material is poorly organized, poorly presented, and unfairly tested. The assignments are unrealistic, support from the book is nonexistant, and a lot of students realized too late in the course that this was one they should have dropped. On the other hand, the subject is a fascinating one, and the few assignments that students are able to finish are cool things to be able to tell people you did. Just be forwarned: it's a cool subject, but you're on your own to explore it, and there is no helpful book to fall back on.\nWorkload:\nSeveral medium-sized programming projects (some are very hard), monthly problem sets, Midterm, Final.\n"
        }
    ]
}