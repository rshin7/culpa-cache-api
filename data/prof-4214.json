{
    "prof_info": [
        {
            "prof_name": "Junfeng Yang",
            "prof_id": 4214,
            "total_reviews": 4
        }
    ],
    "reviews": [
        {
            "course_name": "Operating Systems I",
            "review_date": "January 08, 2014",
            "review_content": "\nHard but not as hard as everyone says. Not very enjoyable but I've had worse classes. If you are a strong programmer with experience in C you will probably do well. If you are a weak or inexperienced programmer you are going to have a bad time. The class could be greatly improved if they reduced the focus on android hacking and emphasized concepts more. The good, mediocre and bad:\n---The good:\n- Professor Yang is well-intentioned and prepares for lecture\n- All class notes and materials are easily available on the website\n- Expectations are clear\n- Problem set portions of HW are pretty straightforward\n- Very fast Piazza response\n- Midterm and final are reasonable and open book\n- Exposes students to research (via required paper reading referenced in both lectures and tests, and via frequent observations by Prof Yang during lecture about what are current research topics and how previous topics were explored over time)\n-QEMU/vx6 combo is clear and good to learn from (unfortunately only used in 1 of 6 HWs)\n---The mediocre:\n- Modern Operating Systems textbook is a bit out of date and loaded with thinly veiled opinions, although it's not bad\n- Lectures try to pack way too much material in. Luckily they aren't very relevant, since you can pretty much learn from the slides (and watch portions on CVN if needed) so you don't need to actually go in order to get decent grades on midterm and final. Much of the lecture material is irrelevant to HW and tests \n- Some of the TAs' attitudes to students are borderline insulting (although others are good and very devoted on Piazza)\n- A lot of students seemed very upset about the grading/curving on Piazza at the end although personally I thought it was fine. Prof is reviewing results in response to the outcry (as I mentioned above, it seems he does actually care about the class, even if some aspects of the class are problematic)\n- Group projects. Ugh\n---The bad:\n- Largely useless programming assignments that generally amount to copy pasting and then hacking up existing kernel code. You spend much more time wrestling with various dev tools, resetting your tablet for one kernel crash after another, dealing with complete lack of kernel debugging tools, etc than actually learning OS concepts. The class should really be called \"android hacking\" instead of \"operating systems\"\n- Way too many technologies/tools involved. QEMU emulator, vx6 code, linux kernel code, adb, x86, ARM, complex macros, makefiles, gdb, git, android bootloaders and VMWare just off the top of my head. So again you wind up getting bogged down in tool specific details and spending way too much time on that rather than fundamental OS concepts\n- Extremely slow grading\n- Little relationship between HW (both code and prob sets) and tests\n- \"Interactive\" code grading sessions with TAs. They are intended to encourage fair work-sharing among group members but do nothing of the sort. TAs are not comfortable dealing with the students in person and in fact just skipped doing these for latter HWs\n- Kernel development textbook is bad. Hardly any actual code examples to show how one might add features to the kernel. Mostly high level overviews that are only partially accurate and copy-pastes of comments and headers from existing kernel code (which you can look at on your own without the book)\n- HW4 (scheduling) was painful. Much much harder than other HWs. They let students drop one but they should just get rid of this HW since almost everyone winds up dropping this one anyway and it is by far the worse offender in terms of being useless kernel hacking. Spent the most time on this one, learned nothing I didn't already know and ended up dropping this grade anyway. ADVICE: If you take this course and ace the first three HWs don't even waste a single minute on this one\nWorkload:\nHeavy although I think the reputation is worse than the reality. 6 HWs (50%), lowest score dropped, with both problems and code in each HW. Problem set portions are medium-easy. Code difficulty varies from medium-easy to very hard. HW4 (scheduling) and HW6 (file systems) by far the hardest, especially HW4. Most code portions are frustrating regardless of difficulty. Open book midterm (20%) and final (30%) aren't too hard.\n"
        },
        {
            "course_name": "Operating Systems I",
            "review_date": "May 25, 2010",
            "review_content": "\nOS is an essential course and you could learn a lot about kernel programming. \nHowever, personally speaking, Prof. Yang's classroom delivery is the worst that I've ever seen at Columbia. The first several classes, it turned out to have 50-70 attendance. Then, this number continued to drop and after Spring Break, we've only had 10 people or so in the classroom. It seems people prefer reading textbook. A lot of errors in his slides. He's a nice person tho.\nSome TAs in this course are really bad, in contrast, some are really good. I agree with the previous review. One TA had a serious attitude problem and he looked down upon on the students. And it seems that there's few communication and discussions among the TAs, so that they have different criteria when grading. A lot of grading errors. It's totally unprofessional.\nWorkload:\n6 tough HWs through out the semester. 1 can be dropped.\n"
        },
        {
            "course_name": "Operating Systems I",
            "review_date": "May 17, 2010",
            "review_content": "\nThis is not a \"mad hard\" course, but a few bad policies unnecessarily make it more painful.\nDespite repeated pleas Prof. Yang did not post the slides before lecture, his reasoning being that this would force everyone to take notes. This voodoo pedagogy ended up discouraging me from taking notes. Please take a look at this: \nKimberley A. Babb, Craig Ross, The timing of online lecture slide availability and its effect on attendance, participation, and exam performance, Computers & Education.\nHis slides are pretty incomprehensible/garbled in most places and too verbose in others. Prof. Yang is pretty earnest, so it may be a matter of N-iterations. \nThe TAs for this course were not the best. They're perfectly OK with the grading but their mannerisms, politeness and preparedness leave a lot to be desired. Also getting the TAs to grade parts of the exam is ridiculous.\nSpring break gives you a breather, so if at all possible take OS in the spring. Prof. Yang will have asides on topics like Files Systems, Concurrency, Testing etc. whereas Prof. Nieh (Fall) talks about other OSes like Android. Other than that the two offerings are almost the same.\nThe Linux kernel is written with *excellent* C programming practices. Some of the constructs are delightfully concise yet ridiculously extensible and performance tuned. Doing the first assignment to its completion will get your C programming up to scratch.\nWorkload:\nI scoff at suggestions that it's too heavy. It's entirely reasonable given the ambitious scope of this course and if you understand what you're doing. Make sure you pick partners who like OS and are not just trying to get it over with.\n"
        },
        {
            "course_name": "Operating Systems I",
            "review_date": "January 03, 2010",
            "review_content": "\nOperating systems is a mad hard course. The assignment take forever. If you don't need to take OS you should avoid it altogether. Its a very painful course, having left me sitting in that smelly CS lounge staring in front of ugly terminals displaying kernel bug and panic messages on warm spring weekends while everyone else plays with frisbees or what ever the youth plays with these days. However the skills learned from this class could come in handy; it helped me net a sweet job so the pain was worth it for me.\nThe theory behind the class isn't too bad but the assignments involve changing the actual linux kernel to do new things. The kernel is very confusing and has many program practices which would normally be considered bad, such as extensive use of macros, but is justified for efficiency. There are a ton of underscores everywhere which annoys me (I prefer the Java capping style but oh well). Also since its the kernel debugging is a lot harder. Make sure you thoroughly understand C before this course.\n\nWorkload:\n6 super heavy assignments (1 dropped), tough midterm and final\n"
        }
    ]
}